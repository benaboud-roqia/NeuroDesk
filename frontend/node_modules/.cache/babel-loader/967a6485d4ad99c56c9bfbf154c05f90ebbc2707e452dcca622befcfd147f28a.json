{"ast":null,"code":"// Données de test pour les sessions\nconst generateTestData = () => {\n  const sessions = [];\n  for (let i = 0; i < 10; i++) {\n    const session = {\n      _id: `session_${i + 1}`,\n      patientId: '1',\n      sessionId: `session_${Date.now()}_${i}`,\n      timestamp: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\n      emg: {\n        values: Array.from({\n          length: 100\n        }, () => Math.random() * 100),\n        samplingRate: 1000,\n        channel: 'channel1'\n      },\n      temperature: {\n        value: 36.5 + Math.random() * 2,\n        unit: '°C',\n        sensor: 'temp_sensor_1'\n      },\n      pression: {\n        value: 1000 + Math.random() * 50,\n        unit: 'hPa',\n        sensor: 'pressure_sensor_1'\n      },\n      metadata: {\n        duree: 300 + Math.random() * 600,\n        typeTest: ['repos', 'contraction', 'mouvement'][Math.floor(Math.random() * 3)],\n        notes: `Session de test ${i + 1}`,\n        position: ['assise', 'debout'][Math.floor(Math.random() * 2)]\n      },\n      analyseIA: {\n        prediction: ['normal', 'anormal', 'suspect'][Math.floor(Math.random() * 3)],\n        confiance: 0.7 + Math.random() * 0.3,\n        pathologieDetectee: [{\n          nom: 'Tremblement essentiel',\n          probabilite: Math.random() * 0.8\n        }],\n        recommandations: ['Continuer la surveillance', 'Consulter un neurologue']\n      },\n      status: ['brut', 'traite', 'analyse'][Math.floor(Math.random() * 3)],\n      duree: 300 + Math.random() * 600\n    };\n    sessions.push(session);\n  }\n  return sessions;\n};\n\n// Données de test pour les patients\nconst generatePatientData = () => {\n  const data = [];\n  for (let i = 0; i < 5; i++) {\n    const item = {\n      id: `data_${i + 1}`,\n      timestamp: new Date(Date.now() - i * 2 * 60 * 60 * 1000).toISOString(),\n      temperature: 36.5 + Math.random() * 2,\n      humidity: 40 + Math.random() * 30,\n      pressure: 1000 + Math.random() * 50,\n      status: Math.random() > 0.3 ? 'normal' : 'anormal'\n    };\n    data.push(item);\n  }\n  return data;\n};\n\n// Service de données local\nexport const localDataService = {\n  // Récupérer toutes les données\n  getAllData: async () => {\n    return new Promise(resolve => {\n      // Simuler un délai réseau\n      setTimeout(() => {\n        resolve(generateTestData());\n      }, 500);\n    });\n  },\n  // Récupérer les données d'un patient\n  getPatientData: async () => {\n    return new Promise(resolve => {\n      // Simuler un délai réseau\n      setTimeout(() => {\n        resolve(generatePatientData());\n      }, 300);\n    });\n  },\n  // Récupérer les statistiques\n  getStats: async () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          totalSessions: 15,\n          sessionsWithAnalysis: 12,\n          analysisRate: 80,\n          averages: {\n            avgTemperature: 36.8,\n            avgPression: 1013.2,\n            minTemperature: 35.9,\n            maxTemperature: 37.5,\n            minPression: 1002,\n            maxPression: 1025\n          },\n          predictions: [{\n            _id: 'normal',\n            count: 8\n          }, {\n            _id: 'anormal',\n            count: 2\n          }, {\n            _id: 'suspect',\n            count: 2\n          }],\n          testTypes: [{\n            _id: 'repos',\n            count: 5\n          }, {\n            _id: 'contraction',\n            count: 6\n          }, {\n            _id: 'mouvement',\n            count: 4\n          }]\n        });\n      }, 200);\n    });\n  }\n};","map":{"version":3,"names":["generateTestData","sessions","i","session","_id","patientId","sessionId","Date","now","timestamp","toISOString","emg","values","Array","from","length","Math","random","samplingRate","channel","temperature","value","unit","sensor","pression","metadata","duree","typeTest","floor","notes","position","analyseIA","prediction","confiance","pathologieDetectee","nom","probabilite","recommandations","status","push","generatePatientData","data","item","id","humidity","pressure","localDataService","getAllData","Promise","resolve","setTimeout","getPatientData","getStats","totalSessions","sessionsWithAnalysis","analysisRate","averages","avgTemperature","avgPression","minTemperature","maxTemperature","minPression","maxPression","predictions","count","testTypes"],"sources":["C:/Users/Roqia/OneDrive/Bureau/desktop-back/frontend/src/services/localData.ts"],"sourcesContent":["import { DataSession, PatientData } from '../types/index';\r\n\r\n// Données de test pour les sessions\r\nconst generateTestData = (): DataSession[] => {\r\n  const sessions: DataSession[] = [];\r\n  \r\n  for (let i = 0; i < 10; i++) {\r\n    const session: DataSession = {\r\n      _id: `session_${i + 1}`,\r\n      patientId: '1',\r\n      sessionId: `session_${Date.now()}_${i}`,\r\n      timestamp: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\r\n      emg: {\r\n        values: Array.from({ length: 100 }, () => Math.random() * 100),\r\n        samplingRate: 1000,\r\n        channel: 'channel1'\r\n      },\r\n      temperature: {\r\n        value: 36.5 + Math.random() * 2,\r\n        unit: '°C',\r\n        sensor: 'temp_sensor_1'\r\n      },\r\n      pression: {\r\n        value: 1000 + Math.random() * 50,\r\n        unit: 'hPa',\r\n        sensor: 'pressure_sensor_1'\r\n      },\r\n      metadata: {\r\n        duree: 300 + Math.random() * 600,\r\n        typeTest: ['repos', 'contraction', 'mouvement'][Math.floor(Math.random() * 3)] as any,\r\n        notes: `Session de test ${i + 1}`,\r\n        position: ['assise', 'debout'][Math.floor(Math.random() * 2)] as any\r\n      },\r\n      analyseIA: {\r\n        prediction: ['normal', 'anormal', 'suspect'][Math.floor(Math.random() * 3)] as any,\r\n        confiance: 0.7 + Math.random() * 0.3,\r\n        pathologieDetectee: [\r\n          {\r\n            nom: 'Tremblement essentiel',\r\n            probabilite: Math.random() * 0.8\r\n          }\r\n        ],\r\n        recommandations: [\r\n          'Continuer la surveillance',\r\n          'Consulter un neurologue'\r\n        ]\r\n      },\r\n      status: ['brut', 'traite', 'analyse'][Math.floor(Math.random() * 3)] as any,\r\n      duree: 300 + Math.random() * 600\r\n    };\r\n    \r\n    sessions.push(session);\r\n  }\r\n  \r\n  return sessions;\r\n};\r\n\r\n// Données de test pour les patients\r\nconst generatePatientData = (): PatientData[] => {\r\n  const data: PatientData[] = [];\r\n  \r\n  for (let i = 0; i < 5; i++) {\r\n    const item: PatientData = {\r\n      id: `data_${i + 1}`,\r\n      timestamp: new Date(Date.now() - i * 2 * 60 * 60 * 1000).toISOString(),\r\n      temperature: 36.5 + Math.random() * 2,\r\n      humidity: 40 + Math.random() * 30,\r\n      pressure: 1000 + Math.random() * 50,\r\n      status: Math.random() > 0.3 ? 'normal' : 'anormal'\r\n    };\r\n    \r\n    data.push(item);\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Service de données local\r\nexport const localDataService = {\r\n  // Récupérer toutes les données\r\n  getAllData: async (): Promise<DataSession[]> => {\r\n    return new Promise((resolve) => {\r\n      // Simuler un délai réseau\r\n      setTimeout(() => {\r\n        resolve(generateTestData());\r\n      }, 500);\r\n    });\r\n  },\r\n\r\n  // Récupérer les données d'un patient\r\n  getPatientData: async (): Promise<PatientData[]> => {\r\n    return new Promise((resolve) => {\r\n      // Simuler un délai réseau\r\n      setTimeout(() => {\r\n        resolve(generatePatientData());\r\n      }, 300);\r\n    });\r\n  },\r\n\r\n  // Récupérer les statistiques\r\n  getStats: async () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          totalSessions: 15,\r\n          sessionsWithAnalysis: 12,\r\n          analysisRate: 80,\r\n          averages: {\r\n            avgTemperature: 36.8,\r\n            avgPression: 1013.2,\r\n            minTemperature: 35.9,\r\n            maxTemperature: 37.5,\r\n            minPression: 1002,\r\n            maxPression: 1025\r\n          },\r\n          predictions: [\r\n            { _id: 'normal', count: 8 },\r\n            { _id: 'anormal', count: 2 },\r\n            { _id: 'suspect', count: 2 }\r\n          ],\r\n          testTypes: [\r\n            { _id: 'repos', count: 5 },\r\n            { _id: 'contraction', count: 6 },\r\n            { _id: 'mouvement', count: 4 }\r\n          ]\r\n        });\r\n      }, 200);\r\n    });\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}